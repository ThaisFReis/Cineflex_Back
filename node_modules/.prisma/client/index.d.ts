
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  name: string | null
  email: string | null
  password: string | null
}

/**
 * Model movie
 * 
 */
export type movie = {
  id: number
  title: string | null
  poster: string | null
}

/**
 * Model sale
 * 
 */
export type sale = {
  id: number
  sessionid: number | null
  seatid: number | null
  userid: number | null
  price: number | null
  tickettype: string | null
  documenttype: string | null
  documentnumber: string | null
}

/**
 * Model seat
 * 
 */
export type seat = {
  id: number
  sessionid: number | null
  rowseats: number | null
  columnseats: number | null
  status: string | null
  seatid: number | null
}

/**
 * Model session
 * 
 */
export type session = {
  id: number
  movieid: number | null
  time: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.movie`: Exposes CRUD operations for the **movie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movies
    * const movies = await prisma.movie.findMany()
    * ```
    */
  get movie(): Prisma.movieDelegate<GlobalReject>;

  /**
   * `prisma.sale`: Exposes CRUD operations for the **sale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sales
    * const sales = await prisma.sale.findMany()
    * ```
    */
  get sale(): Prisma.saleDelegate<GlobalReject>;

  /**
   * `prisma.seat`: Exposes CRUD operations for the **seat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seats
    * const seats = await prisma.seat.findMany()
    * ```
    */
  get seat(): Prisma.seatDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.sessionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    movie: 'movie',
    sale: 'sale',
    seat: 'seat',
    session: 'session'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    sale: number
  }

  export type UserCountOutputTypeSelect = {
    sale?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type MovieCountOutputType
   */


  export type MovieCountOutputType = {
    session: number
  }

  export type MovieCountOutputTypeSelect = {
    session?: boolean
  }

  export type MovieCountOutputTypeGetPayload<S extends boolean | null | undefined | MovieCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MovieCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (MovieCountOutputTypeArgs)
    ? MovieCountOutputType 
    : S extends { select: any } & (MovieCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof MovieCountOutputType ? MovieCountOutputType[P] : never
  } 
      : MovieCountOutputType




  // Custom InputTypes

  /**
   * MovieCountOutputType without action
   */
  export type MovieCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MovieCountOutputType
     */
    select?: MovieCountOutputTypeSelect | null
  }



  /**
   * Count Type SeatCountOutputType
   */


  export type SeatCountOutputType = {
    sale: number
  }

  export type SeatCountOutputTypeSelect = {
    sale?: boolean
  }

  export type SeatCountOutputTypeGetPayload<S extends boolean | null | undefined | SeatCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SeatCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SeatCountOutputTypeArgs)
    ? SeatCountOutputType 
    : S extends { select: any } & (SeatCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SeatCountOutputType ? SeatCountOutputType[P] : never
  } 
      : SeatCountOutputType




  // Custom InputTypes

  /**
   * SeatCountOutputType without action
   */
  export type SeatCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SeatCountOutputType
     */
    select?: SeatCountOutputTypeSelect | null
  }



  /**
   * Count Type SessionCountOutputType
   */


  export type SessionCountOutputType = {
    sale: number
    seat: number
  }

  export type SessionCountOutputTypeSelect = {
    sale?: boolean
    seat?: boolean
  }

  export type SessionCountOutputTypeGetPayload<S extends boolean | null | undefined | SessionCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SessionCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SessionCountOutputTypeArgs)
    ? SessionCountOutputType 
    : S extends { select: any } & (SessionCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SessionCountOutputType ? SessionCountOutputType[P] : never
  } 
      : SessionCountOutputType




  // Custom InputTypes

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SessionCountOutputType
     */
    select?: SessionCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string | null
    email: string | null
    password: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    sale?: boolean | User$saleArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    sale?: boolean | User$saleArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'sale' ? Array < saleGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'sale' ? Array < saleGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sale<T extends User$saleArgs= {}>(args?: Subset<T, User$saleArgs>): Prisma.PrismaPromise<Array<saleGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.sale
   */
  export type User$saleArgs = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    where?: saleWhereInput
    orderBy?: Enumerable<saleOrderByWithRelationInput>
    cursor?: saleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SaleScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model movie
   */


  export type AggregateMovie = {
    _count: MovieCountAggregateOutputType | null
    _avg: MovieAvgAggregateOutputType | null
    _sum: MovieSumAggregateOutputType | null
    _min: MovieMinAggregateOutputType | null
    _max: MovieMaxAggregateOutputType | null
  }

  export type MovieAvgAggregateOutputType = {
    id: number | null
  }

  export type MovieSumAggregateOutputType = {
    id: number | null
  }

  export type MovieMinAggregateOutputType = {
    id: number | null
    title: string | null
    poster: string | null
  }

  export type MovieMaxAggregateOutputType = {
    id: number | null
    title: string | null
    poster: string | null
  }

  export type MovieCountAggregateOutputType = {
    id: number
    title: number
    poster: number
    _all: number
  }


  export type MovieAvgAggregateInputType = {
    id?: true
  }

  export type MovieSumAggregateInputType = {
    id?: true
  }

  export type MovieMinAggregateInputType = {
    id?: true
    title?: true
    poster?: true
  }

  export type MovieMaxAggregateInputType = {
    id?: true
    title?: true
    poster?: true
  }

  export type MovieCountAggregateInputType = {
    id?: true
    title?: true
    poster?: true
    _all?: true
  }

  export type MovieAggregateArgs = {
    /**
     * Filter which movie to aggregate.
     */
    where?: movieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of movies to fetch.
     */
    orderBy?: Enumerable<movieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: movieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned movies
    **/
    _count?: true | MovieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovieMaxAggregateInputType
  }

  export type GetMovieAggregateType<T extends MovieAggregateArgs> = {
        [P in keyof T & keyof AggregateMovie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovie[P]>
      : GetScalarType<T[P], AggregateMovie[P]>
  }




  export type MovieGroupByArgs = {
    where?: movieWhereInput
    orderBy?: Enumerable<movieOrderByWithAggregationInput>
    by: MovieScalarFieldEnum[]
    having?: movieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovieCountAggregateInputType | true
    _avg?: MovieAvgAggregateInputType
    _sum?: MovieSumAggregateInputType
    _min?: MovieMinAggregateInputType
    _max?: MovieMaxAggregateInputType
  }


  export type MovieGroupByOutputType = {
    id: number
    title: string | null
    poster: string | null
    _count: MovieCountAggregateOutputType | null
    _avg: MovieAvgAggregateOutputType | null
    _sum: MovieSumAggregateOutputType | null
    _min: MovieMinAggregateOutputType | null
    _max: MovieMaxAggregateOutputType | null
  }

  type GetMovieGroupByPayload<T extends MovieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MovieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovieGroupByOutputType[P]>
            : GetScalarType<T[P], MovieGroupByOutputType[P]>
        }
      >
    >


  export type movieSelect = {
    id?: boolean
    title?: boolean
    poster?: boolean
    session?: boolean | movie$sessionArgs
    _count?: boolean | MovieCountOutputTypeArgs
  }


  export type movieInclude = {
    session?: boolean | movie$sessionArgs
    _count?: boolean | MovieCountOutputTypeArgs
  }

  export type movieGetPayload<S extends boolean | null | undefined | movieArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? movie :
    S extends undefined ? never :
    S extends { include: any } & (movieArgs | movieFindManyArgs)
    ? movie  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'session' ? Array < sessionGetPayload<S['include'][P]>>  :
        P extends '_count' ? MovieCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (movieArgs | movieFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'session' ? Array < sessionGetPayload<S['select'][P]>>  :
        P extends '_count' ? MovieCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof movie ? movie[P] : never
  } 
      : movie


  type movieCountArgs = 
    Omit<movieFindManyArgs, 'select' | 'include'> & {
      select?: MovieCountAggregateInputType | true
    }

  export interface movieDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Movie that matches the filter.
     * @param {movieFindUniqueArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends movieFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, movieFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'movie'> extends True ? Prisma__movieClient<movieGetPayload<T>> : Prisma__movieClient<movieGetPayload<T> | null, null>

    /**
     * Find one Movie that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {movieFindUniqueOrThrowArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends movieFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, movieFindUniqueOrThrowArgs>
    ): Prisma__movieClient<movieGetPayload<T>>

    /**
     * Find the first Movie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {movieFindFirstArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends movieFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, movieFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'movie'> extends True ? Prisma__movieClient<movieGetPayload<T>> : Prisma__movieClient<movieGetPayload<T> | null, null>

    /**
     * Find the first Movie that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {movieFindFirstOrThrowArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends movieFindFirstOrThrowArgs>(
      args?: SelectSubset<T, movieFindFirstOrThrowArgs>
    ): Prisma__movieClient<movieGetPayload<T>>

    /**
     * Find zero or more Movies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {movieFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movies
     * const movies = await prisma.movie.findMany()
     * 
     * // Get first 10 Movies
     * const movies = await prisma.movie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const movieWithIdOnly = await prisma.movie.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends movieFindManyArgs>(
      args?: SelectSubset<T, movieFindManyArgs>
    ): Prisma.PrismaPromise<Array<movieGetPayload<T>>>

    /**
     * Create a Movie.
     * @param {movieCreateArgs} args - Arguments to create a Movie.
     * @example
     * // Create one Movie
     * const Movie = await prisma.movie.create({
     *   data: {
     *     // ... data to create a Movie
     *   }
     * })
     * 
    **/
    create<T extends movieCreateArgs>(
      args: SelectSubset<T, movieCreateArgs>
    ): Prisma__movieClient<movieGetPayload<T>>

    /**
     * Create many Movies.
     *     @param {movieCreateManyArgs} args - Arguments to create many Movies.
     *     @example
     *     // Create many Movies
     *     const movie = await prisma.movie.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends movieCreateManyArgs>(
      args?: SelectSubset<T, movieCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Movie.
     * @param {movieDeleteArgs} args - Arguments to delete one Movie.
     * @example
     * // Delete one Movie
     * const Movie = await prisma.movie.delete({
     *   where: {
     *     // ... filter to delete one Movie
     *   }
     * })
     * 
    **/
    delete<T extends movieDeleteArgs>(
      args: SelectSubset<T, movieDeleteArgs>
    ): Prisma__movieClient<movieGetPayload<T>>

    /**
     * Update one Movie.
     * @param {movieUpdateArgs} args - Arguments to update one Movie.
     * @example
     * // Update one Movie
     * const movie = await prisma.movie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends movieUpdateArgs>(
      args: SelectSubset<T, movieUpdateArgs>
    ): Prisma__movieClient<movieGetPayload<T>>

    /**
     * Delete zero or more Movies.
     * @param {movieDeleteManyArgs} args - Arguments to filter Movies to delete.
     * @example
     * // Delete a few Movies
     * const { count } = await prisma.movie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends movieDeleteManyArgs>(
      args?: SelectSubset<T, movieDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {movieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movies
     * const movie = await prisma.movie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends movieUpdateManyArgs>(
      args: SelectSubset<T, movieUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Movie.
     * @param {movieUpsertArgs} args - Arguments to update or create a Movie.
     * @example
     * // Update or create a Movie
     * const movie = await prisma.movie.upsert({
     *   create: {
     *     // ... data to create a Movie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movie we want to update
     *   }
     * })
    **/
    upsert<T extends movieUpsertArgs>(
      args: SelectSubset<T, movieUpsertArgs>
    ): Prisma__movieClient<movieGetPayload<T>>

    /**
     * Count the number of Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {movieCountArgs} args - Arguments to filter Movies to count.
     * @example
     * // Count the number of Movies
     * const count = await prisma.movie.count({
     *   where: {
     *     // ... the filter for the Movies we want to count
     *   }
     * })
    **/
    count<T extends movieCountArgs>(
      args?: Subset<T, movieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Movie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovieAggregateArgs>(args: Subset<T, MovieAggregateArgs>): Prisma.PrismaPromise<GetMovieAggregateType<T>>

    /**
     * Group by Movie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovieGroupByArgs['orderBy'] }
        : { orderBy?: MovieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for movie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__movieClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    session<T extends movie$sessionArgs= {}>(args?: Subset<T, movie$sessionArgs>): Prisma.PrismaPromise<Array<sessionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * movie base type for findUnique actions
   */
  export type movieFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: movieInclude | null
    /**
     * Filter, which movie to fetch.
     */
    where: movieWhereUniqueInput
  }

  /**
   * movie findUnique
   */
  export interface movieFindUniqueArgs extends movieFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * movie findUniqueOrThrow
   */
  export type movieFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: movieInclude | null
    /**
     * Filter, which movie to fetch.
     */
    where: movieWhereUniqueInput
  }


  /**
   * movie base type for findFirst actions
   */
  export type movieFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: movieInclude | null
    /**
     * Filter, which movie to fetch.
     */
    where?: movieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of movies to fetch.
     */
    orderBy?: Enumerable<movieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for movies.
     */
    cursor?: movieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of movies.
     */
    distinct?: Enumerable<MovieScalarFieldEnum>
  }

  /**
   * movie findFirst
   */
  export interface movieFindFirstArgs extends movieFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * movie findFirstOrThrow
   */
  export type movieFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: movieInclude | null
    /**
     * Filter, which movie to fetch.
     */
    where?: movieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of movies to fetch.
     */
    orderBy?: Enumerable<movieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for movies.
     */
    cursor?: movieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of movies.
     */
    distinct?: Enumerable<MovieScalarFieldEnum>
  }


  /**
   * movie findMany
   */
  export type movieFindManyArgs = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: movieInclude | null
    /**
     * Filter, which movies to fetch.
     */
    where?: movieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of movies to fetch.
     */
    orderBy?: Enumerable<movieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing movies.
     */
    cursor?: movieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` movies.
     */
    skip?: number
    distinct?: Enumerable<MovieScalarFieldEnum>
  }


  /**
   * movie create
   */
  export type movieCreateArgs = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: movieInclude | null
    /**
     * The data needed to create a movie.
     */
    data: XOR<movieCreateInput, movieUncheckedCreateInput>
  }


  /**
   * movie createMany
   */
  export type movieCreateManyArgs = {
    /**
     * The data used to create many movies.
     */
    data: Enumerable<movieCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * movie update
   */
  export type movieUpdateArgs = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: movieInclude | null
    /**
     * The data needed to update a movie.
     */
    data: XOR<movieUpdateInput, movieUncheckedUpdateInput>
    /**
     * Choose, which movie to update.
     */
    where: movieWhereUniqueInput
  }


  /**
   * movie updateMany
   */
  export type movieUpdateManyArgs = {
    /**
     * The data used to update movies.
     */
    data: XOR<movieUpdateManyMutationInput, movieUncheckedUpdateManyInput>
    /**
     * Filter which movies to update
     */
    where?: movieWhereInput
  }


  /**
   * movie upsert
   */
  export type movieUpsertArgs = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: movieInclude | null
    /**
     * The filter to search for the movie to update in case it exists.
     */
    where: movieWhereUniqueInput
    /**
     * In case the movie found by the `where` argument doesn't exist, create a new movie with this data.
     */
    create: XOR<movieCreateInput, movieUncheckedCreateInput>
    /**
     * In case the movie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<movieUpdateInput, movieUncheckedUpdateInput>
  }


  /**
   * movie delete
   */
  export type movieDeleteArgs = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: movieInclude | null
    /**
     * Filter which movie to delete.
     */
    where: movieWhereUniqueInput
  }


  /**
   * movie deleteMany
   */
  export type movieDeleteManyArgs = {
    /**
     * Filter which movies to delete
     */
    where?: movieWhereInput
  }


  /**
   * movie.session
   */
  export type movie$sessionArgs = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionInclude | null
    where?: sessionWhereInput
    orderBy?: Enumerable<sessionOrderByWithRelationInput>
    cursor?: sessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * movie without action
   */
  export type movieArgs = {
    /**
     * Select specific fields to fetch from the movie
     */
    select?: movieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: movieInclude | null
  }



  /**
   * Model sale
   */


  export type AggregateSale = {
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  export type SaleAvgAggregateOutputType = {
    id: number | null
    sessionid: number | null
    seatid: number | null
    userid: number | null
    price: number | null
  }

  export type SaleSumAggregateOutputType = {
    id: number | null
    sessionid: number | null
    seatid: number | null
    userid: number | null
    price: number | null
  }

  export type SaleMinAggregateOutputType = {
    id: number | null
    sessionid: number | null
    seatid: number | null
    userid: number | null
    price: number | null
    tickettype: string | null
    documenttype: string | null
    documentnumber: string | null
  }

  export type SaleMaxAggregateOutputType = {
    id: number | null
    sessionid: number | null
    seatid: number | null
    userid: number | null
    price: number | null
    tickettype: string | null
    documenttype: string | null
    documentnumber: string | null
  }

  export type SaleCountAggregateOutputType = {
    id: number
    sessionid: number
    seatid: number
    userid: number
    price: number
    tickettype: number
    documenttype: number
    documentnumber: number
    _all: number
  }


  export type SaleAvgAggregateInputType = {
    id?: true
    sessionid?: true
    seatid?: true
    userid?: true
    price?: true
  }

  export type SaleSumAggregateInputType = {
    id?: true
    sessionid?: true
    seatid?: true
    userid?: true
    price?: true
  }

  export type SaleMinAggregateInputType = {
    id?: true
    sessionid?: true
    seatid?: true
    userid?: true
    price?: true
    tickettype?: true
    documenttype?: true
    documentnumber?: true
  }

  export type SaleMaxAggregateInputType = {
    id?: true
    sessionid?: true
    seatid?: true
    userid?: true
    price?: true
    tickettype?: true
    documenttype?: true
    documentnumber?: true
  }

  export type SaleCountAggregateInputType = {
    id?: true
    sessionid?: true
    seatid?: true
    userid?: true
    price?: true
    tickettype?: true
    documenttype?: true
    documentnumber?: true
    _all?: true
  }

  export type SaleAggregateArgs = {
    /**
     * Filter which sale to aggregate.
     */
    where?: saleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sales to fetch.
     */
    orderBy?: Enumerable<saleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: saleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sales
    **/
    _count?: true | SaleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaleMaxAggregateInputType
  }

  export type GetSaleAggregateType<T extends SaleAggregateArgs> = {
        [P in keyof T & keyof AggregateSale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSale[P]>
      : GetScalarType<T[P], AggregateSale[P]>
  }




  export type SaleGroupByArgs = {
    where?: saleWhereInput
    orderBy?: Enumerable<saleOrderByWithAggregationInput>
    by: SaleScalarFieldEnum[]
    having?: saleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaleCountAggregateInputType | true
    _avg?: SaleAvgAggregateInputType
    _sum?: SaleSumAggregateInputType
    _min?: SaleMinAggregateInputType
    _max?: SaleMaxAggregateInputType
  }


  export type SaleGroupByOutputType = {
    id: number
    sessionid: number | null
    seatid: number | null
    userid: number | null
    price: number | null
    tickettype: string | null
    documenttype: string | null
    documentnumber: string | null
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  type GetSaleGroupByPayload<T extends SaleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SaleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleGroupByOutputType[P]>
            : GetScalarType<T[P], SaleGroupByOutputType[P]>
        }
      >
    >


  export type saleSelect = {
    id?: boolean
    sessionid?: boolean
    seatid?: boolean
    userid?: boolean
    price?: boolean
    tickettype?: boolean
    documenttype?: boolean
    documentnumber?: boolean
    seat?: boolean | seatArgs
    session?: boolean | sessionArgs
    User?: boolean | UserArgs
  }


  export type saleInclude = {
    seat?: boolean | seatArgs
    session?: boolean | sessionArgs
    User?: boolean | UserArgs
  }

  export type saleGetPayload<S extends boolean | null | undefined | saleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? sale :
    S extends undefined ? never :
    S extends { include: any } & (saleArgs | saleFindManyArgs)
    ? sale  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'seat' ? seatGetPayload<S['include'][P]> | null :
        P extends 'session' ? sessionGetPayload<S['include'][P]> | null :
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (saleArgs | saleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'seat' ? seatGetPayload<S['select'][P]> | null :
        P extends 'session' ? sessionGetPayload<S['select'][P]> | null :
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :  P extends keyof sale ? sale[P] : never
  } 
      : sale


  type saleCountArgs = 
    Omit<saleFindManyArgs, 'select' | 'include'> & {
      select?: SaleCountAggregateInputType | true
    }

  export interface saleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Sale that matches the filter.
     * @param {saleFindUniqueArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends saleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, saleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sale'> extends True ? Prisma__saleClient<saleGetPayload<T>> : Prisma__saleClient<saleGetPayload<T> | null, null>

    /**
     * Find one Sale that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {saleFindUniqueOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends saleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, saleFindUniqueOrThrowArgs>
    ): Prisma__saleClient<saleGetPayload<T>>

    /**
     * Find the first Sale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saleFindFirstArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends saleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, saleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sale'> extends True ? Prisma__saleClient<saleGetPayload<T>> : Prisma__saleClient<saleGetPayload<T> | null, null>

    /**
     * Find the first Sale that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saleFindFirstOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends saleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, saleFindFirstOrThrowArgs>
    ): Prisma__saleClient<saleGetPayload<T>>

    /**
     * Find zero or more Sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sales
     * const sales = await prisma.sale.findMany()
     * 
     * // Get first 10 Sales
     * const sales = await prisma.sale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saleWithIdOnly = await prisma.sale.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends saleFindManyArgs>(
      args?: SelectSubset<T, saleFindManyArgs>
    ): Prisma.PrismaPromise<Array<saleGetPayload<T>>>

    /**
     * Create a Sale.
     * @param {saleCreateArgs} args - Arguments to create a Sale.
     * @example
     * // Create one Sale
     * const Sale = await prisma.sale.create({
     *   data: {
     *     // ... data to create a Sale
     *   }
     * })
     * 
    **/
    create<T extends saleCreateArgs>(
      args: SelectSubset<T, saleCreateArgs>
    ): Prisma__saleClient<saleGetPayload<T>>

    /**
     * Create many Sales.
     *     @param {saleCreateManyArgs} args - Arguments to create many Sales.
     *     @example
     *     // Create many Sales
     *     const sale = await prisma.sale.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends saleCreateManyArgs>(
      args?: SelectSubset<T, saleCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sale.
     * @param {saleDeleteArgs} args - Arguments to delete one Sale.
     * @example
     * // Delete one Sale
     * const Sale = await prisma.sale.delete({
     *   where: {
     *     // ... filter to delete one Sale
     *   }
     * })
     * 
    **/
    delete<T extends saleDeleteArgs>(
      args: SelectSubset<T, saleDeleteArgs>
    ): Prisma__saleClient<saleGetPayload<T>>

    /**
     * Update one Sale.
     * @param {saleUpdateArgs} args - Arguments to update one Sale.
     * @example
     * // Update one Sale
     * const sale = await prisma.sale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends saleUpdateArgs>(
      args: SelectSubset<T, saleUpdateArgs>
    ): Prisma__saleClient<saleGetPayload<T>>

    /**
     * Delete zero or more Sales.
     * @param {saleDeleteManyArgs} args - Arguments to filter Sales to delete.
     * @example
     * // Delete a few Sales
     * const { count } = await prisma.sale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends saleDeleteManyArgs>(
      args?: SelectSubset<T, saleDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sales
     * const sale = await prisma.sale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends saleUpdateManyArgs>(
      args: SelectSubset<T, saleUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sale.
     * @param {saleUpsertArgs} args - Arguments to update or create a Sale.
     * @example
     * // Update or create a Sale
     * const sale = await prisma.sale.upsert({
     *   create: {
     *     // ... data to create a Sale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sale we want to update
     *   }
     * })
    **/
    upsert<T extends saleUpsertArgs>(
      args: SelectSubset<T, saleUpsertArgs>
    ): Prisma__saleClient<saleGetPayload<T>>

    /**
     * Count the number of Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saleCountArgs} args - Arguments to filter Sales to count.
     * @example
     * // Count the number of Sales
     * const count = await prisma.sale.count({
     *   where: {
     *     // ... the filter for the Sales we want to count
     *   }
     * })
    **/
    count<T extends saleCountArgs>(
      args?: Subset<T, saleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaleAggregateArgs>(args: Subset<T, SaleAggregateArgs>): Prisma.PrismaPromise<GetSaleAggregateType<T>>

    /**
     * Group by Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleGroupByArgs['orderBy'] }
        : { orderBy?: SaleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for sale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__saleClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    seat<T extends seatArgs= {}>(args?: Subset<T, seatArgs>): Prisma__seatClient<seatGetPayload<T> | Null>;

    session<T extends sessionArgs= {}>(args?: Subset<T, sessionArgs>): Prisma__sessionClient<sessionGetPayload<T> | Null>;

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * sale base type for findUnique actions
   */
  export type saleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    /**
     * Filter, which sale to fetch.
     */
    where: saleWhereUniqueInput
  }

  /**
   * sale findUnique
   */
  export interface saleFindUniqueArgs extends saleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sale findUniqueOrThrow
   */
  export type saleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    /**
     * Filter, which sale to fetch.
     */
    where: saleWhereUniqueInput
  }


  /**
   * sale base type for findFirst actions
   */
  export type saleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    /**
     * Filter, which sale to fetch.
     */
    where?: saleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sales to fetch.
     */
    orderBy?: Enumerable<saleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sales.
     */
    cursor?: saleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sales.
     */
    distinct?: Enumerable<SaleScalarFieldEnum>
  }

  /**
   * sale findFirst
   */
  export interface saleFindFirstArgs extends saleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sale findFirstOrThrow
   */
  export type saleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    /**
     * Filter, which sale to fetch.
     */
    where?: saleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sales to fetch.
     */
    orderBy?: Enumerable<saleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sales.
     */
    cursor?: saleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sales.
     */
    distinct?: Enumerable<SaleScalarFieldEnum>
  }


  /**
   * sale findMany
   */
  export type saleFindManyArgs = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    /**
     * Filter, which sales to fetch.
     */
    where?: saleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sales to fetch.
     */
    orderBy?: Enumerable<saleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sales.
     */
    cursor?: saleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sales.
     */
    skip?: number
    distinct?: Enumerable<SaleScalarFieldEnum>
  }


  /**
   * sale create
   */
  export type saleCreateArgs = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    /**
     * The data needed to create a sale.
     */
    data: XOR<saleCreateInput, saleUncheckedCreateInput>
  }


  /**
   * sale createMany
   */
  export type saleCreateManyArgs = {
    /**
     * The data used to create many sales.
     */
    data: Enumerable<saleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * sale update
   */
  export type saleUpdateArgs = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    /**
     * The data needed to update a sale.
     */
    data: XOR<saleUpdateInput, saleUncheckedUpdateInput>
    /**
     * Choose, which sale to update.
     */
    where: saleWhereUniqueInput
  }


  /**
   * sale updateMany
   */
  export type saleUpdateManyArgs = {
    /**
     * The data used to update sales.
     */
    data: XOR<saleUpdateManyMutationInput, saleUncheckedUpdateManyInput>
    /**
     * Filter which sales to update
     */
    where?: saleWhereInput
  }


  /**
   * sale upsert
   */
  export type saleUpsertArgs = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    /**
     * The filter to search for the sale to update in case it exists.
     */
    where: saleWhereUniqueInput
    /**
     * In case the sale found by the `where` argument doesn't exist, create a new sale with this data.
     */
    create: XOR<saleCreateInput, saleUncheckedCreateInput>
    /**
     * In case the sale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<saleUpdateInput, saleUncheckedUpdateInput>
  }


  /**
   * sale delete
   */
  export type saleDeleteArgs = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    /**
     * Filter which sale to delete.
     */
    where: saleWhereUniqueInput
  }


  /**
   * sale deleteMany
   */
  export type saleDeleteManyArgs = {
    /**
     * Filter which sales to delete
     */
    where?: saleWhereInput
  }


  /**
   * sale without action
   */
  export type saleArgs = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
  }



  /**
   * Model seat
   */


  export type AggregateSeat = {
    _count: SeatCountAggregateOutputType | null
    _avg: SeatAvgAggregateOutputType | null
    _sum: SeatSumAggregateOutputType | null
    _min: SeatMinAggregateOutputType | null
    _max: SeatMaxAggregateOutputType | null
  }

  export type SeatAvgAggregateOutputType = {
    id: number | null
    sessionid: number | null
    rowseats: number | null
    columnseats: number | null
    seatid: number | null
  }

  export type SeatSumAggregateOutputType = {
    id: number | null
    sessionid: number | null
    rowseats: number | null
    columnseats: number | null
    seatid: number | null
  }

  export type SeatMinAggregateOutputType = {
    id: number | null
    sessionid: number | null
    rowseats: number | null
    columnseats: number | null
    status: string | null
    seatid: number | null
  }

  export type SeatMaxAggregateOutputType = {
    id: number | null
    sessionid: number | null
    rowseats: number | null
    columnseats: number | null
    status: string | null
    seatid: number | null
  }

  export type SeatCountAggregateOutputType = {
    id: number
    sessionid: number
    rowseats: number
    columnseats: number
    status: number
    seatid: number
    _all: number
  }


  export type SeatAvgAggregateInputType = {
    id?: true
    sessionid?: true
    rowseats?: true
    columnseats?: true
    seatid?: true
  }

  export type SeatSumAggregateInputType = {
    id?: true
    sessionid?: true
    rowseats?: true
    columnseats?: true
    seatid?: true
  }

  export type SeatMinAggregateInputType = {
    id?: true
    sessionid?: true
    rowseats?: true
    columnseats?: true
    status?: true
    seatid?: true
  }

  export type SeatMaxAggregateInputType = {
    id?: true
    sessionid?: true
    rowseats?: true
    columnseats?: true
    status?: true
    seatid?: true
  }

  export type SeatCountAggregateInputType = {
    id?: true
    sessionid?: true
    rowseats?: true
    columnseats?: true
    status?: true
    seatid?: true
    _all?: true
  }

  export type SeatAggregateArgs = {
    /**
     * Filter which seat to aggregate.
     */
    where?: seatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seats to fetch.
     */
    orderBy?: Enumerable<seatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: seatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned seats
    **/
    _count?: true | SeatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeatMaxAggregateInputType
  }

  export type GetSeatAggregateType<T extends SeatAggregateArgs> = {
        [P in keyof T & keyof AggregateSeat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeat[P]>
      : GetScalarType<T[P], AggregateSeat[P]>
  }




  export type SeatGroupByArgs = {
    where?: seatWhereInput
    orderBy?: Enumerable<seatOrderByWithAggregationInput>
    by: SeatScalarFieldEnum[]
    having?: seatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeatCountAggregateInputType | true
    _avg?: SeatAvgAggregateInputType
    _sum?: SeatSumAggregateInputType
    _min?: SeatMinAggregateInputType
    _max?: SeatMaxAggregateInputType
  }


  export type SeatGroupByOutputType = {
    id: number
    sessionid: number | null
    rowseats: number | null
    columnseats: number | null
    status: string | null
    seatid: number | null
    _count: SeatCountAggregateOutputType | null
    _avg: SeatAvgAggregateOutputType | null
    _sum: SeatSumAggregateOutputType | null
    _min: SeatMinAggregateOutputType | null
    _max: SeatMaxAggregateOutputType | null
  }

  type GetSeatGroupByPayload<T extends SeatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SeatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeatGroupByOutputType[P]>
            : GetScalarType<T[P], SeatGroupByOutputType[P]>
        }
      >
    >


  export type seatSelect = {
    id?: boolean
    sessionid?: boolean
    rowseats?: boolean
    columnseats?: boolean
    status?: boolean
    seatid?: boolean
    sale?: boolean | seat$saleArgs
    session?: boolean | sessionArgs
    _count?: boolean | SeatCountOutputTypeArgs
  }


  export type seatInclude = {
    sale?: boolean | seat$saleArgs
    session?: boolean | sessionArgs
    _count?: boolean | SeatCountOutputTypeArgs
  }

  export type seatGetPayload<S extends boolean | null | undefined | seatArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? seat :
    S extends undefined ? never :
    S extends { include: any } & (seatArgs | seatFindManyArgs)
    ? seat  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'sale' ? Array < saleGetPayload<S['include'][P]>>  :
        P extends 'session' ? sessionGetPayload<S['include'][P]> | null :
        P extends '_count' ? SeatCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (seatArgs | seatFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'sale' ? Array < saleGetPayload<S['select'][P]>>  :
        P extends 'session' ? sessionGetPayload<S['select'][P]> | null :
        P extends '_count' ? SeatCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof seat ? seat[P] : never
  } 
      : seat


  type seatCountArgs = 
    Omit<seatFindManyArgs, 'select' | 'include'> & {
      select?: SeatCountAggregateInputType | true
    }

  export interface seatDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Seat that matches the filter.
     * @param {seatFindUniqueArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends seatFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, seatFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'seat'> extends True ? Prisma__seatClient<seatGetPayload<T>> : Prisma__seatClient<seatGetPayload<T> | null, null>

    /**
     * Find one Seat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {seatFindUniqueOrThrowArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends seatFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, seatFindUniqueOrThrowArgs>
    ): Prisma__seatClient<seatGetPayload<T>>

    /**
     * Find the first Seat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seatFindFirstArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends seatFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, seatFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'seat'> extends True ? Prisma__seatClient<seatGetPayload<T>> : Prisma__seatClient<seatGetPayload<T> | null, null>

    /**
     * Find the first Seat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seatFindFirstOrThrowArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends seatFindFirstOrThrowArgs>(
      args?: SelectSubset<T, seatFindFirstOrThrowArgs>
    ): Prisma__seatClient<seatGetPayload<T>>

    /**
     * Find zero or more Seats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seats
     * const seats = await prisma.seat.findMany()
     * 
     * // Get first 10 Seats
     * const seats = await prisma.seat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seatWithIdOnly = await prisma.seat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends seatFindManyArgs>(
      args?: SelectSubset<T, seatFindManyArgs>
    ): Prisma.PrismaPromise<Array<seatGetPayload<T>>>

    /**
     * Create a Seat.
     * @param {seatCreateArgs} args - Arguments to create a Seat.
     * @example
     * // Create one Seat
     * const Seat = await prisma.seat.create({
     *   data: {
     *     // ... data to create a Seat
     *   }
     * })
     * 
    **/
    create<T extends seatCreateArgs>(
      args: SelectSubset<T, seatCreateArgs>
    ): Prisma__seatClient<seatGetPayload<T>>

    /**
     * Create many Seats.
     *     @param {seatCreateManyArgs} args - Arguments to create many Seats.
     *     @example
     *     // Create many Seats
     *     const seat = await prisma.seat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends seatCreateManyArgs>(
      args?: SelectSubset<T, seatCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Seat.
     * @param {seatDeleteArgs} args - Arguments to delete one Seat.
     * @example
     * // Delete one Seat
     * const Seat = await prisma.seat.delete({
     *   where: {
     *     // ... filter to delete one Seat
     *   }
     * })
     * 
    **/
    delete<T extends seatDeleteArgs>(
      args: SelectSubset<T, seatDeleteArgs>
    ): Prisma__seatClient<seatGetPayload<T>>

    /**
     * Update one Seat.
     * @param {seatUpdateArgs} args - Arguments to update one Seat.
     * @example
     * // Update one Seat
     * const seat = await prisma.seat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends seatUpdateArgs>(
      args: SelectSubset<T, seatUpdateArgs>
    ): Prisma__seatClient<seatGetPayload<T>>

    /**
     * Delete zero or more Seats.
     * @param {seatDeleteManyArgs} args - Arguments to filter Seats to delete.
     * @example
     * // Delete a few Seats
     * const { count } = await prisma.seat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends seatDeleteManyArgs>(
      args?: SelectSubset<T, seatDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seats
     * const seat = await prisma.seat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends seatUpdateManyArgs>(
      args: SelectSubset<T, seatUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Seat.
     * @param {seatUpsertArgs} args - Arguments to update or create a Seat.
     * @example
     * // Update or create a Seat
     * const seat = await prisma.seat.upsert({
     *   create: {
     *     // ... data to create a Seat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seat we want to update
     *   }
     * })
    **/
    upsert<T extends seatUpsertArgs>(
      args: SelectSubset<T, seatUpsertArgs>
    ): Prisma__seatClient<seatGetPayload<T>>

    /**
     * Count the number of Seats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {seatCountArgs} args - Arguments to filter Seats to count.
     * @example
     * // Count the number of Seats
     * const count = await prisma.seat.count({
     *   where: {
     *     // ... the filter for the Seats we want to count
     *   }
     * })
    **/
    count<T extends seatCountArgs>(
      args?: Subset<T, seatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeatAggregateArgs>(args: Subset<T, SeatAggregateArgs>): Prisma.PrismaPromise<GetSeatAggregateType<T>>

    /**
     * Group by Seat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeatGroupByArgs['orderBy'] }
        : { orderBy?: SeatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for seat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__seatClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sale<T extends seat$saleArgs= {}>(args?: Subset<T, seat$saleArgs>): Prisma.PrismaPromise<Array<saleGetPayload<T>>| Null>;

    session<T extends sessionArgs= {}>(args?: Subset<T, sessionArgs>): Prisma__sessionClient<sessionGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * seat base type for findUnique actions
   */
  export type seatFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the seat
     */
    select?: seatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seatInclude | null
    /**
     * Filter, which seat to fetch.
     */
    where: seatWhereUniqueInput
  }

  /**
   * seat findUnique
   */
  export interface seatFindUniqueArgs extends seatFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * seat findUniqueOrThrow
   */
  export type seatFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the seat
     */
    select?: seatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seatInclude | null
    /**
     * Filter, which seat to fetch.
     */
    where: seatWhereUniqueInput
  }


  /**
   * seat base type for findFirst actions
   */
  export type seatFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the seat
     */
    select?: seatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seatInclude | null
    /**
     * Filter, which seat to fetch.
     */
    where?: seatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seats to fetch.
     */
    orderBy?: Enumerable<seatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for seats.
     */
    cursor?: seatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of seats.
     */
    distinct?: Enumerable<SeatScalarFieldEnum>
  }

  /**
   * seat findFirst
   */
  export interface seatFindFirstArgs extends seatFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * seat findFirstOrThrow
   */
  export type seatFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the seat
     */
    select?: seatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seatInclude | null
    /**
     * Filter, which seat to fetch.
     */
    where?: seatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seats to fetch.
     */
    orderBy?: Enumerable<seatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for seats.
     */
    cursor?: seatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of seats.
     */
    distinct?: Enumerable<SeatScalarFieldEnum>
  }


  /**
   * seat findMany
   */
  export type seatFindManyArgs = {
    /**
     * Select specific fields to fetch from the seat
     */
    select?: seatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seatInclude | null
    /**
     * Filter, which seats to fetch.
     */
    where?: seatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of seats to fetch.
     */
    orderBy?: Enumerable<seatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing seats.
     */
    cursor?: seatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` seats.
     */
    skip?: number
    distinct?: Enumerable<SeatScalarFieldEnum>
  }


  /**
   * seat create
   */
  export type seatCreateArgs = {
    /**
     * Select specific fields to fetch from the seat
     */
    select?: seatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seatInclude | null
    /**
     * The data needed to create a seat.
     */
    data: XOR<seatCreateInput, seatUncheckedCreateInput>
  }


  /**
   * seat createMany
   */
  export type seatCreateManyArgs = {
    /**
     * The data used to create many seats.
     */
    data: Enumerable<seatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * seat update
   */
  export type seatUpdateArgs = {
    /**
     * Select specific fields to fetch from the seat
     */
    select?: seatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seatInclude | null
    /**
     * The data needed to update a seat.
     */
    data: XOR<seatUpdateInput, seatUncheckedUpdateInput>
    /**
     * Choose, which seat to update.
     */
    where: seatWhereUniqueInput
  }


  /**
   * seat updateMany
   */
  export type seatUpdateManyArgs = {
    /**
     * The data used to update seats.
     */
    data: XOR<seatUpdateManyMutationInput, seatUncheckedUpdateManyInput>
    /**
     * Filter which seats to update
     */
    where?: seatWhereInput
  }


  /**
   * seat upsert
   */
  export type seatUpsertArgs = {
    /**
     * Select specific fields to fetch from the seat
     */
    select?: seatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seatInclude | null
    /**
     * The filter to search for the seat to update in case it exists.
     */
    where: seatWhereUniqueInput
    /**
     * In case the seat found by the `where` argument doesn't exist, create a new seat with this data.
     */
    create: XOR<seatCreateInput, seatUncheckedCreateInput>
    /**
     * In case the seat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<seatUpdateInput, seatUncheckedUpdateInput>
  }


  /**
   * seat delete
   */
  export type seatDeleteArgs = {
    /**
     * Select specific fields to fetch from the seat
     */
    select?: seatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seatInclude | null
    /**
     * Filter which seat to delete.
     */
    where: seatWhereUniqueInput
  }


  /**
   * seat deleteMany
   */
  export type seatDeleteManyArgs = {
    /**
     * Filter which seats to delete
     */
    where?: seatWhereInput
  }


  /**
   * seat.sale
   */
  export type seat$saleArgs = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    where?: saleWhereInput
    orderBy?: Enumerable<saleOrderByWithRelationInput>
    cursor?: saleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SaleScalarFieldEnum>
  }


  /**
   * seat without action
   */
  export type seatArgs = {
    /**
     * Select specific fields to fetch from the seat
     */
    select?: seatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seatInclude | null
  }



  /**
   * Model session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    movieid: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    movieid: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    movieid: number | null
    time: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    movieid: number | null
    time: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    movieid: number
    time: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    movieid?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    movieid?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    movieid?: true
    time?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    movieid?: true
    time?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    movieid?: true
    time?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which session to aggregate.
     */
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: sessionWhereInput
    orderBy?: Enumerable<sessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: sessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: number
    movieid: number | null
    time: Date | null
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type sessionSelect = {
    id?: boolean
    movieid?: boolean
    time?: boolean
    sale?: boolean | session$saleArgs
    seat?: boolean | session$seatArgs
    movie?: boolean | movieArgs
    _count?: boolean | SessionCountOutputTypeArgs
  }


  export type sessionInclude = {
    sale?: boolean | session$saleArgs
    seat?: boolean | session$seatArgs
    movie?: boolean | movieArgs
    _count?: boolean | SessionCountOutputTypeArgs
  }

  export type sessionGetPayload<S extends boolean | null | undefined | sessionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? session :
    S extends undefined ? never :
    S extends { include: any } & (sessionArgs | sessionFindManyArgs)
    ? session  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'sale' ? Array < saleGetPayload<S['include'][P]>>  :
        P extends 'seat' ? Array < seatGetPayload<S['include'][P]>>  :
        P extends 'movie' ? movieGetPayload<S['include'][P]> | null :
        P extends '_count' ? SessionCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (sessionArgs | sessionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'sale' ? Array < saleGetPayload<S['select'][P]>>  :
        P extends 'seat' ? Array < seatGetPayload<S['select'][P]>>  :
        P extends 'movie' ? movieGetPayload<S['select'][P]> | null :
        P extends '_count' ? SessionCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof session ? session[P] : never
  } 
      : session


  type sessionCountArgs = 
    Omit<sessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface sessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Session that matches the filter.
     * @param {sessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'session'> extends True ? Prisma__sessionClient<sessionGetPayload<T>> : Prisma__sessionClient<sessionGetPayload<T> | null, null>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, sessionFindUniqueOrThrowArgs>
    ): Prisma__sessionClient<sessionGetPayload<T>>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'session'> extends True ? Prisma__sessionClient<sessionGetPayload<T>> : Prisma__sessionClient<sessionGetPayload<T> | null, null>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, sessionFindFirstOrThrowArgs>
    ): Prisma__sessionClient<sessionGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sessionFindManyArgs>(
      args?: SelectSubset<T, sessionFindManyArgs>
    ): Prisma.PrismaPromise<Array<sessionGetPayload<T>>>

    /**
     * Create a Session.
     * @param {sessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends sessionCreateArgs>(
      args: SelectSubset<T, sessionCreateArgs>
    ): Prisma__sessionClient<sessionGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {sessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sessionCreateManyArgs>(
      args?: SelectSubset<T, sessionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {sessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends sessionDeleteArgs>(
      args: SelectSubset<T, sessionDeleteArgs>
    ): Prisma__sessionClient<sessionGetPayload<T>>

    /**
     * Update one Session.
     * @param {sessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sessionUpdateArgs>(
      args: SelectSubset<T, sessionUpdateArgs>
    ): Prisma__sessionClient<sessionGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {sessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sessionDeleteManyArgs>(
      args?: SelectSubset<T, sessionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sessionUpdateManyArgs>(
      args: SelectSubset<T, sessionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {sessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends sessionUpsertArgs>(
      args: SelectSubset<T, sessionUpsertArgs>
    ): Prisma__sessionClient<sessionGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends sessionCountArgs>(
      args?: Subset<T, sessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sessionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sale<T extends session$saleArgs= {}>(args?: Subset<T, session$saleArgs>): Prisma.PrismaPromise<Array<saleGetPayload<T>>| Null>;

    seat<T extends session$seatArgs= {}>(args?: Subset<T, session$seatArgs>): Prisma.PrismaPromise<Array<seatGetPayload<T>>| Null>;

    movie<T extends movieArgs= {}>(args?: Subset<T, movieArgs>): Prisma__movieClient<movieGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * session base type for findUnique actions
   */
  export type sessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionInclude | null
    /**
     * Filter, which session to fetch.
     */
    where: sessionWhereUniqueInput
  }

  /**
   * session findUnique
   */
  export interface sessionFindUniqueArgs extends sessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * session findUniqueOrThrow
   */
  export type sessionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionInclude | null
    /**
     * Filter, which session to fetch.
     */
    where: sessionWhereUniqueInput
  }


  /**
   * session base type for findFirst actions
   */
  export type sessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionInclude | null
    /**
     * Filter, which session to fetch.
     */
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessions.
     */
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * session findFirst
   */
  export interface sessionFindFirstArgs extends sessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * session findFirstOrThrow
   */
  export type sessionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionInclude | null
    /**
     * Filter, which session to fetch.
     */
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessions.
     */
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * session findMany
   */
  export type sessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionInclude | null
    /**
     * Filter, which sessions to fetch.
     */
    where?: sessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sessions.
     */
    cursor?: sessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * session create
   */
  export type sessionCreateArgs = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionInclude | null
    /**
     * The data needed to create a session.
     */
    data: XOR<sessionCreateInput, sessionUncheckedCreateInput>
  }


  /**
   * session createMany
   */
  export type sessionCreateManyArgs = {
    /**
     * The data used to create many sessions.
     */
    data: Enumerable<sessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * session update
   */
  export type sessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionInclude | null
    /**
     * The data needed to update a session.
     */
    data: XOR<sessionUpdateInput, sessionUncheckedUpdateInput>
    /**
     * Choose, which session to update.
     */
    where: sessionWhereUniqueInput
  }


  /**
   * session updateMany
   */
  export type sessionUpdateManyArgs = {
    /**
     * The data used to update sessions.
     */
    data: XOR<sessionUpdateManyMutationInput, sessionUncheckedUpdateManyInput>
    /**
     * Filter which sessions to update
     */
    where?: sessionWhereInput
  }


  /**
   * session upsert
   */
  export type sessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionInclude | null
    /**
     * The filter to search for the session to update in case it exists.
     */
    where: sessionWhereUniqueInput
    /**
     * In case the session found by the `where` argument doesn't exist, create a new session with this data.
     */
    create: XOR<sessionCreateInput, sessionUncheckedCreateInput>
    /**
     * In case the session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sessionUpdateInput, sessionUncheckedUpdateInput>
  }


  /**
   * session delete
   */
  export type sessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionInclude | null
    /**
     * Filter which session to delete.
     */
    where: sessionWhereUniqueInput
  }


  /**
   * session deleteMany
   */
  export type sessionDeleteManyArgs = {
    /**
     * Filter which sessions to delete
     */
    where?: sessionWhereInput
  }


  /**
   * session.sale
   */
  export type session$saleArgs = {
    /**
     * Select specific fields to fetch from the sale
     */
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: saleInclude | null
    where?: saleWhereInput
    orderBy?: Enumerable<saleOrderByWithRelationInput>
    cursor?: saleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SaleScalarFieldEnum>
  }


  /**
   * session.seat
   */
  export type session$seatArgs = {
    /**
     * Select specific fields to fetch from the seat
     */
    select?: seatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: seatInclude | null
    where?: seatWhereInput
    orderBy?: Enumerable<seatOrderByWithRelationInput>
    cursor?: seatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SeatScalarFieldEnum>
  }


  /**
   * session without action
   */
  export type sessionArgs = {
    /**
     * Select specific fields to fetch from the session
     */
    select?: sessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const MovieScalarFieldEnum: {
    id: 'id',
    title: 'title',
    poster: 'poster'
  };

  export type MovieScalarFieldEnum = (typeof MovieScalarFieldEnum)[keyof typeof MovieScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SaleScalarFieldEnum: {
    id: 'id',
    sessionid: 'sessionid',
    seatid: 'seatid',
    userid: 'userid',
    price: 'price',
    tickettype: 'tickettype',
    documenttype: 'documenttype',
    documentnumber: 'documentnumber'
  };

  export type SaleScalarFieldEnum = (typeof SaleScalarFieldEnum)[keyof typeof SaleScalarFieldEnum]


  export const SeatScalarFieldEnum: {
    id: 'id',
    sessionid: 'sessionid',
    rowseats: 'rowseats',
    columnseats: 'columnseats',
    status: 'status',
    seatid: 'seatid'
  };

  export type SeatScalarFieldEnum = (typeof SeatScalarFieldEnum)[keyof typeof SeatScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    movieid: 'movieid',
    time: 'time'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    sale?: SaleListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    sale?: saleOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
  }

  export type movieWhereInput = {
    AND?: Enumerable<movieWhereInput>
    OR?: Enumerable<movieWhereInput>
    NOT?: Enumerable<movieWhereInput>
    id?: IntFilter | number
    title?: StringNullableFilter | string | null
    poster?: StringNullableFilter | string | null
    session?: SessionListRelationFilter
  }

  export type movieOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    poster?: SortOrder
    session?: sessionOrderByRelationAggregateInput
  }

  export type movieWhereUniqueInput = {
    id?: number
  }

  export type movieOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    poster?: SortOrder
    _count?: movieCountOrderByAggregateInput
    _avg?: movieAvgOrderByAggregateInput
    _max?: movieMaxOrderByAggregateInput
    _min?: movieMinOrderByAggregateInput
    _sum?: movieSumOrderByAggregateInput
  }

  export type movieScalarWhereWithAggregatesInput = {
    AND?: Enumerable<movieScalarWhereWithAggregatesInput>
    OR?: Enumerable<movieScalarWhereWithAggregatesInput>
    NOT?: Enumerable<movieScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringNullableWithAggregatesFilter | string | null
    poster?: StringNullableWithAggregatesFilter | string | null
  }

  export type saleWhereInput = {
    AND?: Enumerable<saleWhereInput>
    OR?: Enumerable<saleWhereInput>
    NOT?: Enumerable<saleWhereInput>
    id?: IntFilter | number
    sessionid?: IntNullableFilter | number | null
    seatid?: IntNullableFilter | number | null
    userid?: IntNullableFilter | number | null
    price?: FloatNullableFilter | number | null
    tickettype?: StringNullableFilter | string | null
    documenttype?: StringNullableFilter | string | null
    documentnumber?: StringNullableFilter | string | null
    seat?: XOR<SeatRelationFilter, seatWhereInput> | null
    session?: XOR<SessionRelationFilter, sessionWhereInput> | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type saleOrderByWithRelationInput = {
    id?: SortOrder
    sessionid?: SortOrder
    seatid?: SortOrder
    userid?: SortOrder
    price?: SortOrder
    tickettype?: SortOrder
    documenttype?: SortOrder
    documentnumber?: SortOrder
    seat?: seatOrderByWithRelationInput
    session?: sessionOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type saleWhereUniqueInput = {
    id?: number
  }

  export type saleOrderByWithAggregationInput = {
    id?: SortOrder
    sessionid?: SortOrder
    seatid?: SortOrder
    userid?: SortOrder
    price?: SortOrder
    tickettype?: SortOrder
    documenttype?: SortOrder
    documentnumber?: SortOrder
    _count?: saleCountOrderByAggregateInput
    _avg?: saleAvgOrderByAggregateInput
    _max?: saleMaxOrderByAggregateInput
    _min?: saleMinOrderByAggregateInput
    _sum?: saleSumOrderByAggregateInput
  }

  export type saleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<saleScalarWhereWithAggregatesInput>
    OR?: Enumerable<saleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<saleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    sessionid?: IntNullableWithAggregatesFilter | number | null
    seatid?: IntNullableWithAggregatesFilter | number | null
    userid?: IntNullableWithAggregatesFilter | number | null
    price?: FloatNullableWithAggregatesFilter | number | null
    tickettype?: StringNullableWithAggregatesFilter | string | null
    documenttype?: StringNullableWithAggregatesFilter | string | null
    documentnumber?: StringNullableWithAggregatesFilter | string | null
  }

  export type seatWhereInput = {
    AND?: Enumerable<seatWhereInput>
    OR?: Enumerable<seatWhereInput>
    NOT?: Enumerable<seatWhereInput>
    id?: IntFilter | number
    sessionid?: IntNullableFilter | number | null
    rowseats?: IntNullableFilter | number | null
    columnseats?: IntNullableFilter | number | null
    status?: StringNullableFilter | string | null
    seatid?: IntNullableFilter | number | null
    sale?: SaleListRelationFilter
    session?: XOR<SessionRelationFilter, sessionWhereInput> | null
  }

  export type seatOrderByWithRelationInput = {
    id?: SortOrder
    sessionid?: SortOrder
    rowseats?: SortOrder
    columnseats?: SortOrder
    status?: SortOrder
    seatid?: SortOrder
    sale?: saleOrderByRelationAggregateInput
    session?: sessionOrderByWithRelationInput
  }

  export type seatWhereUniqueInput = {
    id?: number
    seatid?: number
  }

  export type seatOrderByWithAggregationInput = {
    id?: SortOrder
    sessionid?: SortOrder
    rowseats?: SortOrder
    columnseats?: SortOrder
    status?: SortOrder
    seatid?: SortOrder
    _count?: seatCountOrderByAggregateInput
    _avg?: seatAvgOrderByAggregateInput
    _max?: seatMaxOrderByAggregateInput
    _min?: seatMinOrderByAggregateInput
    _sum?: seatSumOrderByAggregateInput
  }

  export type seatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<seatScalarWhereWithAggregatesInput>
    OR?: Enumerable<seatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<seatScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    sessionid?: IntNullableWithAggregatesFilter | number | null
    rowseats?: IntNullableWithAggregatesFilter | number | null
    columnseats?: IntNullableWithAggregatesFilter | number | null
    status?: StringNullableWithAggregatesFilter | string | null
    seatid?: IntNullableWithAggregatesFilter | number | null
  }

  export type sessionWhereInput = {
    AND?: Enumerable<sessionWhereInput>
    OR?: Enumerable<sessionWhereInput>
    NOT?: Enumerable<sessionWhereInput>
    id?: IntFilter | number
    movieid?: IntNullableFilter | number | null
    time?: DateTimeNullableFilter | Date | string | null
    sale?: SaleListRelationFilter
    seat?: SeatListRelationFilter
    movie?: XOR<MovieRelationFilter, movieWhereInput> | null
  }

  export type sessionOrderByWithRelationInput = {
    id?: SortOrder
    movieid?: SortOrder
    time?: SortOrder
    sale?: saleOrderByRelationAggregateInput
    seat?: seatOrderByRelationAggregateInput
    movie?: movieOrderByWithRelationInput
  }

  export type sessionWhereUniqueInput = {
    id?: number
  }

  export type sessionOrderByWithAggregationInput = {
    id?: SortOrder
    movieid?: SortOrder
    time?: SortOrder
    _count?: sessionCountOrderByAggregateInput
    _avg?: sessionAvgOrderByAggregateInput
    _max?: sessionMaxOrderByAggregateInput
    _min?: sessionMinOrderByAggregateInput
    _sum?: sessionSumOrderByAggregateInput
  }

  export type sessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<sessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<sessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<sessionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    movieid?: IntNullableWithAggregatesFilter | number | null
    time?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type UserCreateInput = {
    name?: string | null
    email?: string | null
    password?: string | null
    sale?: saleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name?: string | null
    email?: string | null
    password?: string | null
    sale?: saleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    sale?: saleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    sale?: saleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name?: string | null
    email?: string | null
    password?: string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type movieCreateInput = {
    title?: string | null
    poster?: string | null
    session?: sessionCreateNestedManyWithoutMovieInput
  }

  export type movieUncheckedCreateInput = {
    id?: number
    title?: string | null
    poster?: string | null
    session?: sessionUncheckedCreateNestedManyWithoutMovieInput
  }

  export type movieUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    poster?: NullableStringFieldUpdateOperationsInput | string | null
    session?: sessionUpdateManyWithoutMovieNestedInput
  }

  export type movieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    poster?: NullableStringFieldUpdateOperationsInput | string | null
    session?: sessionUncheckedUpdateManyWithoutMovieNestedInput
  }

  export type movieCreateManyInput = {
    id?: number
    title?: string | null
    poster?: string | null
  }

  export type movieUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    poster?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type movieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    poster?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type saleCreateInput = {
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
    seat?: seatCreateNestedOneWithoutSaleInput
    session?: sessionCreateNestedOneWithoutSaleInput
    User?: UserCreateNestedOneWithoutSaleInput
  }

  export type saleUncheckedCreateInput = {
    id?: number
    sessionid?: number | null
    seatid?: number | null
    userid?: number | null
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
  }

  export type saleUpdateInput = {
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    tickettype?: NullableStringFieldUpdateOperationsInput | string | null
    documenttype?: NullableStringFieldUpdateOperationsInput | string | null
    documentnumber?: NullableStringFieldUpdateOperationsInput | string | null
    seat?: seatUpdateOneWithoutSaleNestedInput
    session?: sessionUpdateOneWithoutSaleNestedInput
    User?: UserUpdateOneWithoutSaleNestedInput
  }

  export type saleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionid?: NullableIntFieldUpdateOperationsInput | number | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
    userid?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    tickettype?: NullableStringFieldUpdateOperationsInput | string | null
    documenttype?: NullableStringFieldUpdateOperationsInput | string | null
    documentnumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type saleCreateManyInput = {
    id?: number
    sessionid?: number | null
    seatid?: number | null
    userid?: number | null
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
  }

  export type saleUpdateManyMutationInput = {
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    tickettype?: NullableStringFieldUpdateOperationsInput | string | null
    documenttype?: NullableStringFieldUpdateOperationsInput | string | null
    documentnumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type saleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionid?: NullableIntFieldUpdateOperationsInput | number | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
    userid?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    tickettype?: NullableStringFieldUpdateOperationsInput | string | null
    documenttype?: NullableStringFieldUpdateOperationsInput | string | null
    documentnumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type seatCreateInput = {
    rowseats?: number | null
    columnseats?: number | null
    status?: string | null
    seatid?: number | null
    sale?: saleCreateNestedManyWithoutSeatInput
    session?: sessionCreateNestedOneWithoutSeatInput
  }

  export type seatUncheckedCreateInput = {
    id?: number
    sessionid?: number | null
    rowseats?: number | null
    columnseats?: number | null
    status?: string | null
    seatid?: number | null
    sale?: saleUncheckedCreateNestedManyWithoutSeatInput
  }

  export type seatUpdateInput = {
    rowseats?: NullableIntFieldUpdateOperationsInput | number | null
    columnseats?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
    sale?: saleUpdateManyWithoutSeatNestedInput
    session?: sessionUpdateOneWithoutSeatNestedInput
  }

  export type seatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionid?: NullableIntFieldUpdateOperationsInput | number | null
    rowseats?: NullableIntFieldUpdateOperationsInput | number | null
    columnseats?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
    sale?: saleUncheckedUpdateManyWithoutSeatNestedInput
  }

  export type seatCreateManyInput = {
    id?: number
    sessionid?: number | null
    rowseats?: number | null
    columnseats?: number | null
    status?: string | null
    seatid?: number | null
  }

  export type seatUpdateManyMutationInput = {
    rowseats?: NullableIntFieldUpdateOperationsInput | number | null
    columnseats?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type seatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionid?: NullableIntFieldUpdateOperationsInput | number | null
    rowseats?: NullableIntFieldUpdateOperationsInput | number | null
    columnseats?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sessionCreateInput = {
    time?: Date | string | null
    sale?: saleCreateNestedManyWithoutSessionInput
    seat?: seatCreateNestedManyWithoutSessionInput
    movie?: movieCreateNestedOneWithoutSessionInput
  }

  export type sessionUncheckedCreateInput = {
    id?: number
    movieid?: number | null
    time?: Date | string | null
    sale?: saleUncheckedCreateNestedManyWithoutSessionInput
    seat?: seatUncheckedCreateNestedManyWithoutSessionInput
  }

  export type sessionUpdateInput = {
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sale?: saleUpdateManyWithoutSessionNestedInput
    seat?: seatUpdateManyWithoutSessionNestedInput
    movie?: movieUpdateOneWithoutSessionNestedInput
  }

  export type sessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    movieid?: NullableIntFieldUpdateOperationsInput | number | null
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sale?: saleUncheckedUpdateManyWithoutSessionNestedInput
    seat?: seatUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type sessionCreateManyInput = {
    id?: number
    movieid?: number | null
    time?: Date | string | null
  }

  export type sessionUpdateManyMutationInput = {
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type sessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    movieid?: NullableIntFieldUpdateOperationsInput | number | null
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type SaleListRelationFilter = {
    every?: saleWhereInput
    some?: saleWhereInput
    none?: saleWhereInput
  }

  export type saleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type SessionListRelationFilter = {
    every?: sessionWhereInput
    some?: sessionWhereInput
    none?: sessionWhereInput
  }

  export type sessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type movieCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    poster?: SortOrder
  }

  export type movieAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type movieMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    poster?: SortOrder
  }

  export type movieMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    poster?: SortOrder
  }

  export type movieSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type SeatRelationFilter = {
    is?: seatWhereInput | null
    isNot?: seatWhereInput | null
  }

  export type SessionRelationFilter = {
    is?: sessionWhereInput | null
    isNot?: sessionWhereInput | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type saleCountOrderByAggregateInput = {
    id?: SortOrder
    sessionid?: SortOrder
    seatid?: SortOrder
    userid?: SortOrder
    price?: SortOrder
    tickettype?: SortOrder
    documenttype?: SortOrder
    documentnumber?: SortOrder
  }

  export type saleAvgOrderByAggregateInput = {
    id?: SortOrder
    sessionid?: SortOrder
    seatid?: SortOrder
    userid?: SortOrder
    price?: SortOrder
  }

  export type saleMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionid?: SortOrder
    seatid?: SortOrder
    userid?: SortOrder
    price?: SortOrder
    tickettype?: SortOrder
    documenttype?: SortOrder
    documentnumber?: SortOrder
  }

  export type saleMinOrderByAggregateInput = {
    id?: SortOrder
    sessionid?: SortOrder
    seatid?: SortOrder
    userid?: SortOrder
    price?: SortOrder
    tickettype?: SortOrder
    documenttype?: SortOrder
    documentnumber?: SortOrder
  }

  export type saleSumOrderByAggregateInput = {
    id?: SortOrder
    sessionid?: SortOrder
    seatid?: SortOrder
    userid?: SortOrder
    price?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type seatCountOrderByAggregateInput = {
    id?: SortOrder
    sessionid?: SortOrder
    rowseats?: SortOrder
    columnseats?: SortOrder
    status?: SortOrder
    seatid?: SortOrder
  }

  export type seatAvgOrderByAggregateInput = {
    id?: SortOrder
    sessionid?: SortOrder
    rowseats?: SortOrder
    columnseats?: SortOrder
    seatid?: SortOrder
  }

  export type seatMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionid?: SortOrder
    rowseats?: SortOrder
    columnseats?: SortOrder
    status?: SortOrder
    seatid?: SortOrder
  }

  export type seatMinOrderByAggregateInput = {
    id?: SortOrder
    sessionid?: SortOrder
    rowseats?: SortOrder
    columnseats?: SortOrder
    status?: SortOrder
    seatid?: SortOrder
  }

  export type seatSumOrderByAggregateInput = {
    id?: SortOrder
    sessionid?: SortOrder
    rowseats?: SortOrder
    columnseats?: SortOrder
    seatid?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type SeatListRelationFilter = {
    every?: seatWhereInput
    some?: seatWhereInput
    none?: seatWhereInput
  }

  export type MovieRelationFilter = {
    is?: movieWhereInput | null
    isNot?: movieWhereInput | null
  }

  export type seatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sessionCountOrderByAggregateInput = {
    id?: SortOrder
    movieid?: SortOrder
    time?: SortOrder
  }

  export type sessionAvgOrderByAggregateInput = {
    id?: SortOrder
    movieid?: SortOrder
  }

  export type sessionMaxOrderByAggregateInput = {
    id?: SortOrder
    movieid?: SortOrder
    time?: SortOrder
  }

  export type sessionMinOrderByAggregateInput = {
    id?: SortOrder
    movieid?: SortOrder
    time?: SortOrder
  }

  export type sessionSumOrderByAggregateInput = {
    id?: SortOrder
    movieid?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type saleCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<saleCreateWithoutUserInput>, Enumerable<saleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutUserInput>
    createMany?: saleCreateManyUserInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type saleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<saleCreateWithoutUserInput>, Enumerable<saleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutUserInput>
    createMany?: saleCreateManyUserInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type saleUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<saleCreateWithoutUserInput>, Enumerable<saleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutUserInput>
    createMany?: saleCreateManyUserInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type saleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<saleCreateWithoutUserInput>, Enumerable<saleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutUserInput>
    createMany?: saleCreateManyUserInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type sessionCreateNestedManyWithoutMovieInput = {
    create?: XOR<Enumerable<sessionCreateWithoutMovieInput>, Enumerable<sessionUncheckedCreateWithoutMovieInput>>
    connectOrCreate?: Enumerable<sessionCreateOrConnectWithoutMovieInput>
    createMany?: sessionCreateManyMovieInputEnvelope
    connect?: Enumerable<sessionWhereUniqueInput>
  }

  export type sessionUncheckedCreateNestedManyWithoutMovieInput = {
    create?: XOR<Enumerable<sessionCreateWithoutMovieInput>, Enumerable<sessionUncheckedCreateWithoutMovieInput>>
    connectOrCreate?: Enumerable<sessionCreateOrConnectWithoutMovieInput>
    createMany?: sessionCreateManyMovieInputEnvelope
    connect?: Enumerable<sessionWhereUniqueInput>
  }

  export type sessionUpdateManyWithoutMovieNestedInput = {
    create?: XOR<Enumerable<sessionCreateWithoutMovieInput>, Enumerable<sessionUncheckedCreateWithoutMovieInput>>
    connectOrCreate?: Enumerable<sessionCreateOrConnectWithoutMovieInput>
    upsert?: Enumerable<sessionUpsertWithWhereUniqueWithoutMovieInput>
    createMany?: sessionCreateManyMovieInputEnvelope
    set?: Enumerable<sessionWhereUniqueInput>
    disconnect?: Enumerable<sessionWhereUniqueInput>
    delete?: Enumerable<sessionWhereUniqueInput>
    connect?: Enumerable<sessionWhereUniqueInput>
    update?: Enumerable<sessionUpdateWithWhereUniqueWithoutMovieInput>
    updateMany?: Enumerable<sessionUpdateManyWithWhereWithoutMovieInput>
    deleteMany?: Enumerable<sessionScalarWhereInput>
  }

  export type sessionUncheckedUpdateManyWithoutMovieNestedInput = {
    create?: XOR<Enumerable<sessionCreateWithoutMovieInput>, Enumerable<sessionUncheckedCreateWithoutMovieInput>>
    connectOrCreate?: Enumerable<sessionCreateOrConnectWithoutMovieInput>
    upsert?: Enumerable<sessionUpsertWithWhereUniqueWithoutMovieInput>
    createMany?: sessionCreateManyMovieInputEnvelope
    set?: Enumerable<sessionWhereUniqueInput>
    disconnect?: Enumerable<sessionWhereUniqueInput>
    delete?: Enumerable<sessionWhereUniqueInput>
    connect?: Enumerable<sessionWhereUniqueInput>
    update?: Enumerable<sessionUpdateWithWhereUniqueWithoutMovieInput>
    updateMany?: Enumerable<sessionUpdateManyWithWhereWithoutMovieInput>
    deleteMany?: Enumerable<sessionScalarWhereInput>
  }

  export type seatCreateNestedOneWithoutSaleInput = {
    create?: XOR<seatCreateWithoutSaleInput, seatUncheckedCreateWithoutSaleInput>
    connectOrCreate?: seatCreateOrConnectWithoutSaleInput
    connect?: seatWhereUniqueInput
  }

  export type sessionCreateNestedOneWithoutSaleInput = {
    create?: XOR<sessionCreateWithoutSaleInput, sessionUncheckedCreateWithoutSaleInput>
    connectOrCreate?: sessionCreateOrConnectWithoutSaleInput
    connect?: sessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSaleInput = {
    create?: XOR<UserCreateWithoutSaleInput, UserUncheckedCreateWithoutSaleInput>
    connectOrCreate?: UserCreateOrConnectWithoutSaleInput
    connect?: UserWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type seatUpdateOneWithoutSaleNestedInput = {
    create?: XOR<seatCreateWithoutSaleInput, seatUncheckedCreateWithoutSaleInput>
    connectOrCreate?: seatCreateOrConnectWithoutSaleInput
    upsert?: seatUpsertWithoutSaleInput
    disconnect?: boolean
    delete?: boolean
    connect?: seatWhereUniqueInput
    update?: XOR<seatUpdateWithoutSaleInput, seatUncheckedUpdateWithoutSaleInput>
  }

  export type sessionUpdateOneWithoutSaleNestedInput = {
    create?: XOR<sessionCreateWithoutSaleInput, sessionUncheckedCreateWithoutSaleInput>
    connectOrCreate?: sessionCreateOrConnectWithoutSaleInput
    upsert?: sessionUpsertWithoutSaleInput
    disconnect?: boolean
    delete?: boolean
    connect?: sessionWhereUniqueInput
    update?: XOR<sessionUpdateWithoutSaleInput, sessionUncheckedUpdateWithoutSaleInput>
  }

  export type UserUpdateOneWithoutSaleNestedInput = {
    create?: XOR<UserCreateWithoutSaleInput, UserUncheckedCreateWithoutSaleInput>
    connectOrCreate?: UserCreateOrConnectWithoutSaleInput
    upsert?: UserUpsertWithoutSaleInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSaleInput, UserUncheckedUpdateWithoutSaleInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type saleCreateNestedManyWithoutSeatInput = {
    create?: XOR<Enumerable<saleCreateWithoutSeatInput>, Enumerable<saleUncheckedCreateWithoutSeatInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSeatInput>
    createMany?: saleCreateManySeatInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type sessionCreateNestedOneWithoutSeatInput = {
    create?: XOR<sessionCreateWithoutSeatInput, sessionUncheckedCreateWithoutSeatInput>
    connectOrCreate?: sessionCreateOrConnectWithoutSeatInput
    connect?: sessionWhereUniqueInput
  }

  export type saleUncheckedCreateNestedManyWithoutSeatInput = {
    create?: XOR<Enumerable<saleCreateWithoutSeatInput>, Enumerable<saleUncheckedCreateWithoutSeatInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSeatInput>
    createMany?: saleCreateManySeatInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type saleUpdateManyWithoutSeatNestedInput = {
    create?: XOR<Enumerable<saleCreateWithoutSeatInput>, Enumerable<saleUncheckedCreateWithoutSeatInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSeatInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutSeatInput>
    createMany?: saleCreateManySeatInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutSeatInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutSeatInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type sessionUpdateOneWithoutSeatNestedInput = {
    create?: XOR<sessionCreateWithoutSeatInput, sessionUncheckedCreateWithoutSeatInput>
    connectOrCreate?: sessionCreateOrConnectWithoutSeatInput
    upsert?: sessionUpsertWithoutSeatInput
    disconnect?: boolean
    delete?: boolean
    connect?: sessionWhereUniqueInput
    update?: XOR<sessionUpdateWithoutSeatInput, sessionUncheckedUpdateWithoutSeatInput>
  }

  export type saleUncheckedUpdateManyWithoutSeatNestedInput = {
    create?: XOR<Enumerable<saleCreateWithoutSeatInput>, Enumerable<saleUncheckedCreateWithoutSeatInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSeatInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutSeatInput>
    createMany?: saleCreateManySeatInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutSeatInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutSeatInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type saleCreateNestedManyWithoutSessionInput = {
    create?: XOR<Enumerable<saleCreateWithoutSessionInput>, Enumerable<saleUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSessionInput>
    createMany?: saleCreateManySessionInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type seatCreateNestedManyWithoutSessionInput = {
    create?: XOR<Enumerable<seatCreateWithoutSessionInput>, Enumerable<seatUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<seatCreateOrConnectWithoutSessionInput>
    createMany?: seatCreateManySessionInputEnvelope
    connect?: Enumerable<seatWhereUniqueInput>
  }

  export type movieCreateNestedOneWithoutSessionInput = {
    create?: XOR<movieCreateWithoutSessionInput, movieUncheckedCreateWithoutSessionInput>
    connectOrCreate?: movieCreateOrConnectWithoutSessionInput
    connect?: movieWhereUniqueInput
  }

  export type saleUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<Enumerable<saleCreateWithoutSessionInput>, Enumerable<saleUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSessionInput>
    createMany?: saleCreateManySessionInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type seatUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<Enumerable<seatCreateWithoutSessionInput>, Enumerable<seatUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<seatCreateOrConnectWithoutSessionInput>
    createMany?: seatCreateManySessionInputEnvelope
    connect?: Enumerable<seatWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type saleUpdateManyWithoutSessionNestedInput = {
    create?: XOR<Enumerable<saleCreateWithoutSessionInput>, Enumerable<saleUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSessionInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutSessionInput>
    createMany?: saleCreateManySessionInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutSessionInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutSessionInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type seatUpdateManyWithoutSessionNestedInput = {
    create?: XOR<Enumerable<seatCreateWithoutSessionInput>, Enumerable<seatUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<seatCreateOrConnectWithoutSessionInput>
    upsert?: Enumerable<seatUpsertWithWhereUniqueWithoutSessionInput>
    createMany?: seatCreateManySessionInputEnvelope
    set?: Enumerable<seatWhereUniqueInput>
    disconnect?: Enumerable<seatWhereUniqueInput>
    delete?: Enumerable<seatWhereUniqueInput>
    connect?: Enumerable<seatWhereUniqueInput>
    update?: Enumerable<seatUpdateWithWhereUniqueWithoutSessionInput>
    updateMany?: Enumerable<seatUpdateManyWithWhereWithoutSessionInput>
    deleteMany?: Enumerable<seatScalarWhereInput>
  }

  export type movieUpdateOneWithoutSessionNestedInput = {
    create?: XOR<movieCreateWithoutSessionInput, movieUncheckedCreateWithoutSessionInput>
    connectOrCreate?: movieCreateOrConnectWithoutSessionInput
    upsert?: movieUpsertWithoutSessionInput
    disconnect?: boolean
    delete?: boolean
    connect?: movieWhereUniqueInput
    update?: XOR<movieUpdateWithoutSessionInput, movieUncheckedUpdateWithoutSessionInput>
  }

  export type saleUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<Enumerable<saleCreateWithoutSessionInput>, Enumerable<saleUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSessionInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutSessionInput>
    createMany?: saleCreateManySessionInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutSessionInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutSessionInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type seatUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<Enumerable<seatCreateWithoutSessionInput>, Enumerable<seatUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<seatCreateOrConnectWithoutSessionInput>
    upsert?: Enumerable<seatUpsertWithWhereUniqueWithoutSessionInput>
    createMany?: seatCreateManySessionInputEnvelope
    set?: Enumerable<seatWhereUniqueInput>
    disconnect?: Enumerable<seatWhereUniqueInput>
    delete?: Enumerable<seatWhereUniqueInput>
    connect?: Enumerable<seatWhereUniqueInput>
    update?: Enumerable<seatUpdateWithWhereUniqueWithoutSessionInput>
    updateMany?: Enumerable<seatUpdateManyWithWhereWithoutSessionInput>
    deleteMany?: Enumerable<seatScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type saleCreateWithoutUserInput = {
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
    seat?: seatCreateNestedOneWithoutSaleInput
    session?: sessionCreateNestedOneWithoutSaleInput
  }

  export type saleUncheckedCreateWithoutUserInput = {
    id?: number
    sessionid?: number | null
    seatid?: number | null
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
  }

  export type saleCreateOrConnectWithoutUserInput = {
    where: saleWhereUniqueInput
    create: XOR<saleCreateWithoutUserInput, saleUncheckedCreateWithoutUserInput>
  }

  export type saleCreateManyUserInputEnvelope = {
    data: Enumerable<saleCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type saleUpsertWithWhereUniqueWithoutUserInput = {
    where: saleWhereUniqueInput
    update: XOR<saleUpdateWithoutUserInput, saleUncheckedUpdateWithoutUserInput>
    create: XOR<saleCreateWithoutUserInput, saleUncheckedCreateWithoutUserInput>
  }

  export type saleUpdateWithWhereUniqueWithoutUserInput = {
    where: saleWhereUniqueInput
    data: XOR<saleUpdateWithoutUserInput, saleUncheckedUpdateWithoutUserInput>
  }

  export type saleUpdateManyWithWhereWithoutUserInput = {
    where: saleScalarWhereInput
    data: XOR<saleUpdateManyMutationInput, saleUncheckedUpdateManyWithoutSaleInput>
  }

  export type saleScalarWhereInput = {
    AND?: Enumerable<saleScalarWhereInput>
    OR?: Enumerable<saleScalarWhereInput>
    NOT?: Enumerable<saleScalarWhereInput>
    id?: IntFilter | number
    sessionid?: IntNullableFilter | number | null
    seatid?: IntNullableFilter | number | null
    userid?: IntNullableFilter | number | null
    price?: FloatNullableFilter | number | null
    tickettype?: StringNullableFilter | string | null
    documenttype?: StringNullableFilter | string | null
    documentnumber?: StringNullableFilter | string | null
  }

  export type sessionCreateWithoutMovieInput = {
    time?: Date | string | null
    sale?: saleCreateNestedManyWithoutSessionInput
    seat?: seatCreateNestedManyWithoutSessionInput
  }

  export type sessionUncheckedCreateWithoutMovieInput = {
    id?: number
    time?: Date | string | null
    sale?: saleUncheckedCreateNestedManyWithoutSessionInput
    seat?: seatUncheckedCreateNestedManyWithoutSessionInput
  }

  export type sessionCreateOrConnectWithoutMovieInput = {
    where: sessionWhereUniqueInput
    create: XOR<sessionCreateWithoutMovieInput, sessionUncheckedCreateWithoutMovieInput>
  }

  export type sessionCreateManyMovieInputEnvelope = {
    data: Enumerable<sessionCreateManyMovieInput>
    skipDuplicates?: boolean
  }

  export type sessionUpsertWithWhereUniqueWithoutMovieInput = {
    where: sessionWhereUniqueInput
    update: XOR<sessionUpdateWithoutMovieInput, sessionUncheckedUpdateWithoutMovieInput>
    create: XOR<sessionCreateWithoutMovieInput, sessionUncheckedCreateWithoutMovieInput>
  }

  export type sessionUpdateWithWhereUniqueWithoutMovieInput = {
    where: sessionWhereUniqueInput
    data: XOR<sessionUpdateWithoutMovieInput, sessionUncheckedUpdateWithoutMovieInput>
  }

  export type sessionUpdateManyWithWhereWithoutMovieInput = {
    where: sessionScalarWhereInput
    data: XOR<sessionUpdateManyMutationInput, sessionUncheckedUpdateManyWithoutSessionInput>
  }

  export type sessionScalarWhereInput = {
    AND?: Enumerable<sessionScalarWhereInput>
    OR?: Enumerable<sessionScalarWhereInput>
    NOT?: Enumerable<sessionScalarWhereInput>
    id?: IntFilter | number
    movieid?: IntNullableFilter | number | null
    time?: DateTimeNullableFilter | Date | string | null
  }

  export type seatCreateWithoutSaleInput = {
    rowseats?: number | null
    columnseats?: number | null
    status?: string | null
    seatid?: number | null
    session?: sessionCreateNestedOneWithoutSeatInput
  }

  export type seatUncheckedCreateWithoutSaleInput = {
    id?: number
    sessionid?: number | null
    rowseats?: number | null
    columnseats?: number | null
    status?: string | null
    seatid?: number | null
  }

  export type seatCreateOrConnectWithoutSaleInput = {
    where: seatWhereUniqueInput
    create: XOR<seatCreateWithoutSaleInput, seatUncheckedCreateWithoutSaleInput>
  }

  export type sessionCreateWithoutSaleInput = {
    time?: Date | string | null
    seat?: seatCreateNestedManyWithoutSessionInput
    movie?: movieCreateNestedOneWithoutSessionInput
  }

  export type sessionUncheckedCreateWithoutSaleInput = {
    id?: number
    movieid?: number | null
    time?: Date | string | null
    seat?: seatUncheckedCreateNestedManyWithoutSessionInput
  }

  export type sessionCreateOrConnectWithoutSaleInput = {
    where: sessionWhereUniqueInput
    create: XOR<sessionCreateWithoutSaleInput, sessionUncheckedCreateWithoutSaleInput>
  }

  export type UserCreateWithoutSaleInput = {
    name?: string | null
    email?: string | null
    password?: string | null
  }

  export type UserUncheckedCreateWithoutSaleInput = {
    id?: number
    name?: string | null
    email?: string | null
    password?: string | null
  }

  export type UserCreateOrConnectWithoutSaleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSaleInput, UserUncheckedCreateWithoutSaleInput>
  }

  export type seatUpsertWithoutSaleInput = {
    update: XOR<seatUpdateWithoutSaleInput, seatUncheckedUpdateWithoutSaleInput>
    create: XOR<seatCreateWithoutSaleInput, seatUncheckedCreateWithoutSaleInput>
  }

  export type seatUpdateWithoutSaleInput = {
    rowseats?: NullableIntFieldUpdateOperationsInput | number | null
    columnseats?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
    session?: sessionUpdateOneWithoutSeatNestedInput
  }

  export type seatUncheckedUpdateWithoutSaleInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionid?: NullableIntFieldUpdateOperationsInput | number | null
    rowseats?: NullableIntFieldUpdateOperationsInput | number | null
    columnseats?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type sessionUpsertWithoutSaleInput = {
    update: XOR<sessionUpdateWithoutSaleInput, sessionUncheckedUpdateWithoutSaleInput>
    create: XOR<sessionCreateWithoutSaleInput, sessionUncheckedCreateWithoutSaleInput>
  }

  export type sessionUpdateWithoutSaleInput = {
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seat?: seatUpdateManyWithoutSessionNestedInput
    movie?: movieUpdateOneWithoutSessionNestedInput
  }

  export type sessionUncheckedUpdateWithoutSaleInput = {
    id?: IntFieldUpdateOperationsInput | number
    movieid?: NullableIntFieldUpdateOperationsInput | number | null
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seat?: seatUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type UserUpsertWithoutSaleInput = {
    update: XOR<UserUpdateWithoutSaleInput, UserUncheckedUpdateWithoutSaleInput>
    create: XOR<UserCreateWithoutSaleInput, UserUncheckedCreateWithoutSaleInput>
  }

  export type UserUpdateWithoutSaleInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutSaleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type saleCreateWithoutSeatInput = {
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
    session?: sessionCreateNestedOneWithoutSaleInput
    User?: UserCreateNestedOneWithoutSaleInput
  }

  export type saleUncheckedCreateWithoutSeatInput = {
    id?: number
    sessionid?: number | null
    userid?: number | null
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
  }

  export type saleCreateOrConnectWithoutSeatInput = {
    where: saleWhereUniqueInput
    create: XOR<saleCreateWithoutSeatInput, saleUncheckedCreateWithoutSeatInput>
  }

  export type saleCreateManySeatInputEnvelope = {
    data: Enumerable<saleCreateManySeatInput>
    skipDuplicates?: boolean
  }

  export type sessionCreateWithoutSeatInput = {
    time?: Date | string | null
    sale?: saleCreateNestedManyWithoutSessionInput
    movie?: movieCreateNestedOneWithoutSessionInput
  }

  export type sessionUncheckedCreateWithoutSeatInput = {
    id?: number
    movieid?: number | null
    time?: Date | string | null
    sale?: saleUncheckedCreateNestedManyWithoutSessionInput
  }

  export type sessionCreateOrConnectWithoutSeatInput = {
    where: sessionWhereUniqueInput
    create: XOR<sessionCreateWithoutSeatInput, sessionUncheckedCreateWithoutSeatInput>
  }

  export type saleUpsertWithWhereUniqueWithoutSeatInput = {
    where: saleWhereUniqueInput
    update: XOR<saleUpdateWithoutSeatInput, saleUncheckedUpdateWithoutSeatInput>
    create: XOR<saleCreateWithoutSeatInput, saleUncheckedCreateWithoutSeatInput>
  }

  export type saleUpdateWithWhereUniqueWithoutSeatInput = {
    where: saleWhereUniqueInput
    data: XOR<saleUpdateWithoutSeatInput, saleUncheckedUpdateWithoutSeatInput>
  }

  export type saleUpdateManyWithWhereWithoutSeatInput = {
    where: saleScalarWhereInput
    data: XOR<saleUpdateManyMutationInput, saleUncheckedUpdateManyWithoutSaleInput>
  }

  export type sessionUpsertWithoutSeatInput = {
    update: XOR<sessionUpdateWithoutSeatInput, sessionUncheckedUpdateWithoutSeatInput>
    create: XOR<sessionCreateWithoutSeatInput, sessionUncheckedCreateWithoutSeatInput>
  }

  export type sessionUpdateWithoutSeatInput = {
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sale?: saleUpdateManyWithoutSessionNestedInput
    movie?: movieUpdateOneWithoutSessionNestedInput
  }

  export type sessionUncheckedUpdateWithoutSeatInput = {
    id?: IntFieldUpdateOperationsInput | number
    movieid?: NullableIntFieldUpdateOperationsInput | number | null
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sale?: saleUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type saleCreateWithoutSessionInput = {
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
    seat?: seatCreateNestedOneWithoutSaleInput
    User?: UserCreateNestedOneWithoutSaleInput
  }

  export type saleUncheckedCreateWithoutSessionInput = {
    id?: number
    seatid?: number | null
    userid?: number | null
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
  }

  export type saleCreateOrConnectWithoutSessionInput = {
    where: saleWhereUniqueInput
    create: XOR<saleCreateWithoutSessionInput, saleUncheckedCreateWithoutSessionInput>
  }

  export type saleCreateManySessionInputEnvelope = {
    data: Enumerable<saleCreateManySessionInput>
    skipDuplicates?: boolean
  }

  export type seatCreateWithoutSessionInput = {
    rowseats?: number | null
    columnseats?: number | null
    status?: string | null
    seatid?: number | null
    sale?: saleCreateNestedManyWithoutSeatInput
  }

  export type seatUncheckedCreateWithoutSessionInput = {
    id?: number
    rowseats?: number | null
    columnseats?: number | null
    status?: string | null
    seatid?: number | null
    sale?: saleUncheckedCreateNestedManyWithoutSeatInput
  }

  export type seatCreateOrConnectWithoutSessionInput = {
    where: seatWhereUniqueInput
    create: XOR<seatCreateWithoutSessionInput, seatUncheckedCreateWithoutSessionInput>
  }

  export type seatCreateManySessionInputEnvelope = {
    data: Enumerable<seatCreateManySessionInput>
    skipDuplicates?: boolean
  }

  export type movieCreateWithoutSessionInput = {
    title?: string | null
    poster?: string | null
  }

  export type movieUncheckedCreateWithoutSessionInput = {
    id?: number
    title?: string | null
    poster?: string | null
  }

  export type movieCreateOrConnectWithoutSessionInput = {
    where: movieWhereUniqueInput
    create: XOR<movieCreateWithoutSessionInput, movieUncheckedCreateWithoutSessionInput>
  }

  export type saleUpsertWithWhereUniqueWithoutSessionInput = {
    where: saleWhereUniqueInput
    update: XOR<saleUpdateWithoutSessionInput, saleUncheckedUpdateWithoutSessionInput>
    create: XOR<saleCreateWithoutSessionInput, saleUncheckedCreateWithoutSessionInput>
  }

  export type saleUpdateWithWhereUniqueWithoutSessionInput = {
    where: saleWhereUniqueInput
    data: XOR<saleUpdateWithoutSessionInput, saleUncheckedUpdateWithoutSessionInput>
  }

  export type saleUpdateManyWithWhereWithoutSessionInput = {
    where: saleScalarWhereInput
    data: XOR<saleUpdateManyMutationInput, saleUncheckedUpdateManyWithoutSaleInput>
  }

  export type seatUpsertWithWhereUniqueWithoutSessionInput = {
    where: seatWhereUniqueInput
    update: XOR<seatUpdateWithoutSessionInput, seatUncheckedUpdateWithoutSessionInput>
    create: XOR<seatCreateWithoutSessionInput, seatUncheckedCreateWithoutSessionInput>
  }

  export type seatUpdateWithWhereUniqueWithoutSessionInput = {
    where: seatWhereUniqueInput
    data: XOR<seatUpdateWithoutSessionInput, seatUncheckedUpdateWithoutSessionInput>
  }

  export type seatUpdateManyWithWhereWithoutSessionInput = {
    where: seatScalarWhereInput
    data: XOR<seatUpdateManyMutationInput, seatUncheckedUpdateManyWithoutSeatInput>
  }

  export type seatScalarWhereInput = {
    AND?: Enumerable<seatScalarWhereInput>
    OR?: Enumerable<seatScalarWhereInput>
    NOT?: Enumerable<seatScalarWhereInput>
    id?: IntFilter | number
    sessionid?: IntNullableFilter | number | null
    rowseats?: IntNullableFilter | number | null
    columnseats?: IntNullableFilter | number | null
    status?: StringNullableFilter | string | null
    seatid?: IntNullableFilter | number | null
  }

  export type movieUpsertWithoutSessionInput = {
    update: XOR<movieUpdateWithoutSessionInput, movieUncheckedUpdateWithoutSessionInput>
    create: XOR<movieCreateWithoutSessionInput, movieUncheckedCreateWithoutSessionInput>
  }

  export type movieUpdateWithoutSessionInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    poster?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type movieUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    poster?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type saleCreateManyUserInput = {
    id?: number
    sessionid?: number | null
    seatid?: number | null
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
  }

  export type saleUpdateWithoutUserInput = {
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    tickettype?: NullableStringFieldUpdateOperationsInput | string | null
    documenttype?: NullableStringFieldUpdateOperationsInput | string | null
    documentnumber?: NullableStringFieldUpdateOperationsInput | string | null
    seat?: seatUpdateOneWithoutSaleNestedInput
    session?: sessionUpdateOneWithoutSaleNestedInput
  }

  export type saleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionid?: NullableIntFieldUpdateOperationsInput | number | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    tickettype?: NullableStringFieldUpdateOperationsInput | string | null
    documenttype?: NullableStringFieldUpdateOperationsInput | string | null
    documentnumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type saleUncheckedUpdateManyWithoutSaleInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionid?: NullableIntFieldUpdateOperationsInput | number | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    tickettype?: NullableStringFieldUpdateOperationsInput | string | null
    documenttype?: NullableStringFieldUpdateOperationsInput | string | null
    documentnumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sessionCreateManyMovieInput = {
    id?: number
    time?: Date | string | null
  }

  export type sessionUpdateWithoutMovieInput = {
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sale?: saleUpdateManyWithoutSessionNestedInput
    seat?: seatUpdateManyWithoutSessionNestedInput
  }

  export type sessionUncheckedUpdateWithoutMovieInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sale?: saleUncheckedUpdateManyWithoutSessionNestedInput
    seat?: seatUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type sessionUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type saleCreateManySeatInput = {
    id?: number
    sessionid?: number | null
    userid?: number | null
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
  }

  export type saleUpdateWithoutSeatInput = {
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    tickettype?: NullableStringFieldUpdateOperationsInput | string | null
    documenttype?: NullableStringFieldUpdateOperationsInput | string | null
    documentnumber?: NullableStringFieldUpdateOperationsInput | string | null
    session?: sessionUpdateOneWithoutSaleNestedInput
    User?: UserUpdateOneWithoutSaleNestedInput
  }

  export type saleUncheckedUpdateWithoutSeatInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionid?: NullableIntFieldUpdateOperationsInput | number | null
    userid?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    tickettype?: NullableStringFieldUpdateOperationsInput | string | null
    documenttype?: NullableStringFieldUpdateOperationsInput | string | null
    documentnumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type saleCreateManySessionInput = {
    id?: number
    seatid?: number | null
    userid?: number | null
    price?: number | null
    tickettype?: string | null
    documenttype?: string | null
    documentnumber?: string | null
  }

  export type seatCreateManySessionInput = {
    id?: number
    rowseats?: number | null
    columnseats?: number | null
    status?: string | null
    seatid?: number | null
  }

  export type saleUpdateWithoutSessionInput = {
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    tickettype?: NullableStringFieldUpdateOperationsInput | string | null
    documenttype?: NullableStringFieldUpdateOperationsInput | string | null
    documentnumber?: NullableStringFieldUpdateOperationsInput | string | null
    seat?: seatUpdateOneWithoutSaleNestedInput
    User?: UserUpdateOneWithoutSaleNestedInput
  }

  export type saleUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
    userid?: NullableIntFieldUpdateOperationsInput | number | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    tickettype?: NullableStringFieldUpdateOperationsInput | string | null
    documenttype?: NullableStringFieldUpdateOperationsInput | string | null
    documentnumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type seatUpdateWithoutSessionInput = {
    rowseats?: NullableIntFieldUpdateOperationsInput | number | null
    columnseats?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
    sale?: saleUpdateManyWithoutSeatNestedInput
  }

  export type seatUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    rowseats?: NullableIntFieldUpdateOperationsInput | number | null
    columnseats?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
    sale?: saleUncheckedUpdateManyWithoutSeatNestedInput
  }

  export type seatUncheckedUpdateManyWithoutSeatInput = {
    id?: IntFieldUpdateOperationsInput | number
    rowseats?: NullableIntFieldUpdateOperationsInput | number | null
    columnseats?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    seatid?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}