generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  name     String
  email    String     @unique
  password String
  sales    Sale[]
  Document Document[]
}

model Document {
  id       Int          @id @default(autoincrement())
  type     DocumentType // cpf ou rg
  number   String
  verified Boolean      @default(false)
  user     User         @relation(fields: [userId], references: [id])
  userId   Int
}

model Movie {
  id       Int       @id @default(autoincrement())
  title    String
  poster   String?
  sessions Session[]
}

model Session {
  id      Int      @id @default(autoincrement())
  date    DateTime
  movie   Movie    @relation(fields: [movieId], references: [id])
  movieId Int
  seats   Seat[]
  tickets Ticket[]
}

model Seat {
  id         Int     @id @default(autoincrement())
  row        Int
  seatNumber Int
  session    Session @relation(fields: [sessionId], references: [id])
  sessionId  Int
  sale       Sale    @relation(fields: [saleId], references: [id])
  saleId     Int
  Ticket     Ticket? @relation(fields: [ticketId], references: [id])
  ticketId   Int?
}

model Ticket {
  id        Int     @id @default(autoincrement())
  type      Boolean @default(false) //False == inteira, True == Meia
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
  seat      Seat[]
  sale      Sale?   @relation(fields: [saleId], references: [id])
  saleId    Int?
}

model Sale {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  total   Float
  tickets Ticket[]
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  Seat    Seat[]
}

enum DocumentType {
  CPF
  RG
}