generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  Tickets   Ticket[]
  token     Token[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @default(now()) @updatedAt
  sale      Sale[]
  document  Document[]
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Movies
model Movie {
  id       Int       @id @default(autoincrement())
  title    String
  poster   String?
  sessions Session[]
}

model Session {
  id      Int      @id @default(autoincrement())
  date    DateTime
  movie   Movie    @relation(fields: [movieId], references: [id])
  movieId Int
  seats   Seat[]
  tickets Ticket[]
}

model Seat {
  id         Int     @id @default(autoincrement())
  row        Int
  seatNumber Int
  session    Session @relation(fields: [sessionId], references: [id])
  sessionId  Int
  saleId     Int
  Ticket     Ticket? @relation(fields: [ticketId], references: [id])
  ticketId   Int?
}

// Sales
model Ticket {
  id         Int       @id @default(autoincrement())
  type       Boolean   @default(false) //False == inteira, True == Meia
  session    Session   @relation(fields: [sessionId], references: [id])
  sessionId  Int
  seat       Seat[]
  createAt   DateTime
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  documentId Int?
  document   Document? @relation(fields: [documentId], references: [id])
  paymentId  Int?
  payment    Payment?  @relation(fields: [paymentId], references: [id])
  saleId     Int?
  sale       Sale?     @relation(fields: [saleId], references: [id])
}

model Document {
  id       Int          @id @default(autoincrement())
  name     String
  type     DocumentType // cpf ou rg
  number   String
  ticket   Ticket[]
  userId   Int
  user     User         @relation(fields: [userId], references: [id])
}

enum DocumentType {
  CPF
  RG
}

model Payment {
  id         Int         @id @default(autoincrement())
  ticket     Ticket[]
  sale       Sale[]
  type       PaymentType
  value      Float
  createdAt  DateTime    @default(now())
  cardNumber String
  cardCvv    String
  cardDate   String
  verified   Boolean     @default(false)
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
}

model Sale {
  id        Int       @id @default(autoincrement())
  ticket    Ticket[]
  payment   Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
}
